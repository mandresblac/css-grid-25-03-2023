html {
  box-sizing: border-box;
  font-size: 16px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 1rem;
  font-size: 1.25rem;
  background-color: #666;
  border: medium solid #999;
}


/* ------------------ POSICIONAMIENTO EXPLICITA ------------------- */

.grid-explicit {
  display: grid;

  /* Grid de 3cx3r (3 Columnas "c", por 3 filas "r") */
  grid-template-columns: 50% 100px 1fr;
  grid-template-rows: 2rem 20vh 30%;

  /* Grid de 5cx4r (5 Columnas "c", por 4 filas "r") */
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, auto); /* auto adapta el tamaño de la fila al contenido del elemento que mas contenido tenga, con auto el tamaño de las filas siempre va a depender del contenido que tengan nuestros elementos */
  grid-template-rows: repeat(4, 25%);
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 1fr);

  /* Grid de 4cx5r */
  grid-template-columns: 20% repeat(2, 30%) 20%;
  grid-template-rows: repeat(5, auto); /* auto para que se adapten en base al tamaño de su contenido */

  /* NOTA: Las propiedades grid-column-gap, grid-row-gap y grid-gap ya están obsoletas o "Deprecated" en su remplazo se utilizan column-gap, row-gap y gap */

  grid-column-gap: 2rem; /* Espaciado entre Columnas */
  grid-row-gap: 1rem; /* Espaciado entre Filas */
  grid-gap: 100px 0px; /* Es el shorthand para grid-row-gap y grid-column-gap, el primer valor es para row y el segundo para column */

  /* column-gap y row-gap */
  column-gap: 4rem;
  row-gap: 2rem;

  /* gap: Se usa para dar espaciado entre filas (row) y columnas (column), el primer valor es para row y el segundo valor es para column */
  gap: 1vh 1vw;
  gap: 0;
}

/* Seleccionamos el elemento 10 */
.grid-explicit .item:nth-child(10) {
  color: aqua;
  /* Las propiedades grid-column-start: , grid-column-end: , grid-row-start: y
  grid-row-end: permiten definir de que linea a que linea (Grid Line) un elemento acupara un espacio dentro de la grid */
  grid-column-start: 2; /* Empieza en la linea (Grid Line) 2 de la columna*/
  grid-column-end: 3; /* Empieza en la linea (Grid Line) 3 de la columna*/

  grid-row-start: 2;/* Empieza en la linea (Grid Line) 2 de la fila */
  grid-row-end: 3;/* Termina en la linea (Grid Line) 3 de la fila */

  /* Atajo o shortcut de las anteriores propiedades */
  grid-column: 3 / 4;
  grid-row: 2 / 3;

  /* Para combinar celdas en la grid, como en las tablas de excel o word */
  grid-column: 3 / 5;
  grid-row: 2 / 3;

  /* grid-area es otro atajo o shortcut, así:
  grid-area: grid-row-start / grid-row-end / grid-column-start / grid-column-end */
  grid-area: 2 / 3 / 3 / 5;
}

/* Seleccionamos el elemento 12 */
.grid-explicit .item:nth-child(12) {
  color:  greenyellow;
  /* Otra manera de posicionar los elementos es diciendole que ocupe varios espacios dependiendo de la posicion donde se encuentre, para eso utilizamos la palabra "span" que traducida significa como "abarcar" */
  grid-row: span 2;
  grid-column: span 3;
}

/* Combinamos las propiedades vistas anteriormente */
.grid-explicit .item:nth-child(15) { /* Seleccionamos el elemento 15 */
  color: orange;
  /* Posicionamos el elemento 15 en la linea 1 de las row y a partir de ahí que se desplase 2 filas hacia abajo, luego que se posicione en la column 1 y de ahí se desplace 2 columnas hacia la derecha */
  grid-row: 1 / span 2; /* span 3 significa que se desplasara 2 filas no lineas (grid line) */
  grid-column: 1 / span 2; /* span 3 significa que se desplasara 2 columnas no lineas (grid line) */
}


/* VIDEO 4 */
/* ------------------ POSICIONAMIENTO CON NOMBRES DE GRID LINES ------------------- */

/* OJO: esta taenica de ponerle nombres a la s grid lines complica un poco mas el uso de grid-css por eso es muy poco utilizada */

.grid-line-names {
  text-align: center;

  display: grid;

  /* Grid de 3cx3r */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);

  /* Para darle nombres a la lineas (grid lines) de columnas o filas (rows) y no utilizar números, ponemos primero entre llaves el nombre que queremos darle a la linea sequido del tamaño que queremos darle a la columa, que en este caso seria 1fr */
  grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
  /* grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4]; */
  grid-template-rows: [linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4];
}

.grid-line-names .item:nth-child(3) {
  color: greenyellow;
  grid-row: linea-r3 / linea-r4;
  grid-column: linea-c1 / linea-c4;
  /* OJO: Al ponerle nombres a las Columns y rows el atajo grid-area no funciona  */
}


/* VIDEO 5 */
/* ------------ ASIGNANDO NOMBRES A AREAS ESPECIFICAS DE LA GRID -GRID AREAS ------------ */

.grid-areas {
  display: grid;

  /* Grid de 2cx4r */
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2 ,1fr) 60px;

  /* Para asignar nombres a las areas*/
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ." /* Con el punto le decimos a grid-css que deje el area vacía */
    "footer footer";
}

.header {
  grid-area: header; /* Utilizamos la propiedad grid-area para asignarle el nombre que anteriormente colocamos en la propiedad grid-template-areas: de la clase .grid-areas que en este caso es header */
}

.content {
  grid-area: content; /* Utilizamos la propiedad grid-area para asignarle el nombre que anteriormente colocamos en la propiedad grid-template-areas: de la clase .grid-areas que en este caso es content */
}

.sidebar {
  grid-area: sidebar; /* Utilizamos la propiedad grid-area para asignarle el nombre que anteriormente colocamos en la propiedad grid-template-areas: de la clase .grid-areas que en este caso es sidebar */
}

.footer {
  grid-area: footer; /* Utilizamos la propiedad grid-area para asignarle el nombre que anteriormente colocamos en la propiedad grid-template-areas: de la clase .grid-areas que en este caso es footer */
}


/* VIDEO 6 */
/* ------------ EJERCICIO GRID IMPLÍCITA ------------ */

.grid-implicit {
  width: 40%;

  /* display: grid define que una caja sera grid de bloque o grid de línea */
  /* El valor grid genera un elemento de bloque (Block), o caja grid de bloque,  */
  display: grid;/* display: grid; hace que el modelo de grid css se aplique en modo block o de bloque */

  /* El valor inline-grid convierte los elementos en elementos en linea (inline) , o caja grid de linea*/
  display: inline-grid;/* display: inline-grid; hace que el modelo de grid css se aplique en modo inline o en linea */


  /* Grid de 4cx3r */
  grid: repeat(3, 200px) / repeat(4, 1fr);/* rows / columns */
}

/* 
Diferencia entre grid explicita y grid implícita 

Grid explicita
Cuando definimos en grid-template-columns y grid-template-rows definimos las filas y las columnas que estamos esperando recibir.

Grid implícita
Los elementos que se salen de la cuadricula que hallamos definido toman un tamaño que por defecto les da grid. 
*/


/* VIDEO 7 */
/* ------------ Flujo de la Grid (Grid Flow) ------------ */

.grid-flow {
  display: grid;

  /* Grid de 5cx3r */
  grid: repeat(3, 150px) / repeat(5, 1fr);/* rows / columns */

  /* grid-auto-flow determina cual es el flujo que va a seguir mi cuadricula, su valor por defecto es row, también tiene el valor column */
  grid-auto-flow: row;
  grid-auto-flow: column;

  /* grid-auto-rows y grid-auto-columns van a determinar el valor del tamaño que deben de tomar los elementos que estan fuera de la grid explicita, es decir en la grid implícita que genera automáticamente css grid, su valor por defecto es auto */
  grid-auto-rows: 100px;
  grid-auto-columns: 50px;
}


/* VIDEO 8 */

